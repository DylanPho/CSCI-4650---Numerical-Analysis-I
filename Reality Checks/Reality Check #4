{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOnOjXOj2oSzpBPpzP6BeHH"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"hRu5ntl2KqM0"},"outputs":[],"source":["# Name: Dylan Phoutthavong\n","# Date: 06/14/2024\n","# Course: CSCI 4650 E01\n","\n","# Reality Check #4\n","\n","# 1.) Solve the system (4.37) by using Multivariate Newton's Method. Find the receiver position  (ùë•,ùë¶,ùëß)  near earth and time correction  ùëë  for known, simultaneous satellite positions\n","    # (15600,7540,20140) ,  (18760,2750,18610) ,  (17610,14630,13480) ,  (19170,610,18390)  in km, and measured time intervals  0.07074 ,  0.07220 ,  0.07690 ,  0.07242  in seconds, respectively.\n","    # Set the initial vector to be  (ùë•0,ùë¶0,ùëß0,ùëë0)=(0,0,6370,0) . As a check, the answers are approximately  (ùë•,ùë¶,ùëß)=(‚àí41.77271,‚àí16.78919,6370.0596) ,and  ùëë=‚àí3.201566√ó10‚àí3  seconds.\n","\n","# Question 1:\n","\n","  # This is the forward problem. We change our position to ( x = 21; y = 176; z = 10072 ) and our time correction to d = 0.0012.\n","  # We also change the position of the four satellites to\n","  # A1 = 15600; B1 =  7540; C1 = 20140;\n","  # A2 = 18760; B2 =  2750; C2 = 18610;\n","  # A3 = 17610; B3 = 14630; C3 = 13480;\n","  # A4 = 19170; B4 =   610; C4 = 18390;\n","\n","# What should the time t1, t2, t3 and t4 be?\n","\n","# Question 2:\n","\n","  # This is the inverse problem. ( That is we know the satellites positions, we know the times t1, t2, t3 and t4. We want to find our position.)\n","  # We change the position of the four satellites and times to\n","  # A1 = 18500; B1 =  4980; C1 = 18405; t1 = 0.068369;\n","  # A2 = 19641; B2 =  8000; C2 = 16000; t2 = 0.071752;\n","  # A3 = 12356; B3 = 11129; C3 = 20719; t3 = 0.065283;\n","  # A4 = 18876; B4 = 17001; C4 = 7776; t4 = 0.082428;\n","\n","# Using Multivariate Newton‚Äôs method, find our position to ( x; y; z ) and our time correction to d."]},{"cell_type":"code","source":["import numpy as np\n","from math import sqrt\n","\n","# Earth's radius (km)\n","r = 6367.4447\n","\n","# Speed of light in km/sec\n","c = 299792.458\n","\n","# Known simultaneous satellite positions (km) and measured time intervals (s).\n","A1 = 15600; B1 =  7540; C1 = 20140; t1 = 0.07074;\n","A2 = 18760; B2 =  2750; C2 = 18610; t2 = 0.07220;\n","A3 = 17610; B3 = 14630; C3 = 13480; t3 = 0.07690;\n","A4 = 19170; B4 =   610; C4 = 18390; t4 = 0.07242;\n","\n","# Define the function F(x)\n","F = lambda x: np.array(\n","    [[sqrt((x[0,0] - A1)**2 + (x[1,0] - B1)**2 + (x[2,0] - C1)**2) - c * (t1 - x[3,0])],\n","     [sqrt((x[0,0] - A2)**2 + (x[1,0] - B2)**2 + (x[2,0] - C2)**2) - c * (t2 - x[3,0])],\n","     [sqrt((x[0,0] - A3)**2 + (x[1,0] - B3)**2 + (x[2,0] - C3)**2) - c * (t3 - x[3,0])],\n","     [sqrt((x[0,0] - A4)**2 + (x[1,0] - B4)**2 + (x[2,0] - C4)**2) - c * (t4 - x[3,0])]])\n","\n","# Define the Jacobian matrix J(x)\n","J = lambda x: np.array(\n","    [[(x[0,0] - A1) / sqrt((x[0,0] - A1)**2 + (x[1,0] - B1)**2 + (x[2,0] - C1)**2),\n","      (x[1,0] - B1) / sqrt((x[0,0] - A1)**2 + (x[1,0] - B1)**2 + (x[2,0] - C1)**2),\n","      (x[2,0] - C1) / sqrt((x[0,0] - A1)**2 + (x[1,0] - B1)**2 + (x[2,0] - C1)**2), c],\n","     [(x[0,0] - A2) / sqrt((x[0,0] - A2)**2 + (x[1,0] - B2)**2 + (x[2,0] - C2)**2),\n","      (x[1,0] - B2) / sqrt((x[0,0] - A2)**2 + (x[1,0] - B2)**2 + (x[2,0] - C2)**2),\n","      (x[2,0] - C2) / sqrt((x[0,0] - A2)**2 + (x[1,0] - B2)**2 + (x[2,0] - C2)**2), c],\n","     [(x[0,0] - A3) / sqrt((x[0,0] - A3)**2 + (x[1,0] - B3)**2 + (x[2,0] - C3)**2),\n","      (x[1,0] - B3) / sqrt((x[0,0] - A3)**2 + (x[1,0] - B3)**2 + (x[2,0] - C3)**2),\n","      (x[2,0] - C3) / sqrt((x[0,0] - A3)**2 + (x[1,0] - B3)**2 + (x[2,0] - C3)**2), c],\n","     [(x[0,0] - A4) / sqrt((x[0,0] - A4)**2 + (x[1,0] - B4)**2 + (x[2,0] - C4)**2),\n","      (x[1,0] - B4) / sqrt((x[0,0] - A4)**2 + (x[1,0] - B4)**2 + (x[2,0] - C4)**2),\n","      (x[2,0] - C4) / sqrt((x[0,0] - A4)**2 + (x[1,0] - B4)**2 + (x[2,0] - C4)**2), c]])\n","\n","x_0 = 0; y_0 = 0; z_0 = 6370; d_0 = 0;\n","x_k = np.array([[x_0], [y_0], [z_0], [d_0]])  # Initial vector guess.\n","\n","# First step of Newton's method\n","s = np.linalg.solve(J(x_k), -F(x_k))\n","x_k = x_k + s\n","\n","# Second step of Newton's method\n","s = np.linalg.solve(J(x_k), -F(x_k))\n","x_k = x_k + s\n","\n","print(\"x =\", f\"{x_k[0,0]: 10.5f}\", \"   y =\", f\"{x_k[1,0]: 10.5f}\", \"   z =\", f\"{x_k[2,0]: 10.4f}\", \"   d =\", f\"{x_k[3,0]: 10.6e}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"etchvXZQMMPg","executionInfo":{"status":"ok","timestamp":1721338992795,"user_tz":360,"elapsed":139,"user":{"displayName":"Dylan Ph","userId":"08011022677362301216"}},"outputId":"957fcf83-d82a-4225-8823-468d2a87ff0b"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["x =  -41.77271    y =  -16.78919    z =  6370.0596    d = -3.201566e-03\n"]}]},{"cell_type":"code","source":["# Question 1:\n","\n","  # This is the forward problem. We change our position to ( x = 21; y = 176; z = 10072 ) and our time correction to d = 0.0012.\n","  # We also change the position of the four satellites to\n","  # A1 = 15600; B1 =  7540; C1 = 20140;\n","  # A2 = 18760; B2 =  2750; C2 = 18610;\n","  # A3 = 17610; B3 = 14630; C3 = 13480;\n","  # A4 = 19170; B4 =   610; C4 = 18390;\n","\n","# What should the time t1, t2, t3 and t4 be?\n","\n","import numpy as np\n","from math import sqrt\n","\n","# Earth's radius (km)\n","r = 6367.4447\n","\n","# Speed of light in km/sec\n","c = 299792.458\n","\n","# Given position and time correction\n","x, y, z, d = 21, 176, 10072, 0.0012\n","\n","# Satellite positions\n","A1, B1, C1 = 15600, 7540, 20140\n","A2, B2, C2 = 18760, 2750, 18610\n","A3, B3, C3 = 17610, 14630, 13480\n","A4, B4, C4 = 19170, 610, 18390\n","\n","# Calculate the times\n","t1 = sqrt((x - A1)**2 + (y - B1)**2 + (z - C1)**2) / c + d\n","t2 = sqrt((x - A2)**2 + (y - B2)**2 + (z - C2)**2) / c + d\n","t3 = sqrt((x - A3)**2 + (y - B3)**2 + (z - C3)**2) / c + d\n","t4 = sqrt((x - A4)**2 + (y - B4)**2 + (z - C4)**2) / c + d\n","\n","print(\"t1 =\", t1)\n","print(\"t2 =\", t2)\n","print(\"t3 =\", t3)\n","print(\"t4 =\", t4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VDOHDMz4NNmu","executionInfo":{"status":"ok","timestamp":1721338984078,"user_tz":360,"elapsed":177,"user":{"displayName":"Dylan Ph","userId":"08011022677362301216"}},"outputId":"bc6fc07c-70ba-4637-ad1a-34882e37104c"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["t1 = 0.06777076638380501\n","t2 = 0.07042343412526082\n","t3 = 0.07798537526057751\n","t4 = 0.07085515442574836\n"]}]},{"cell_type":"code","source":["# Question 2:\n","\n","  # This is the inverse problem. ( That is we know the satellites positions, we know the times t1, t2, t3 and t4. We want to find our position.)\n","  # We change the position of the four satellites and times to\n","  # A1 = 18500; B1 =  4980; C1 = 18405; t1 = 0.068369;\n","  # A2 = 19641; B2 =  8000; C2 = 16000; t2 = 0.071752;\n","  # A3 = 12356; B3 = 11129; C3 = 20719; t3 = 0.065283;\n","  # A4 = 18876; B4 = 17001; C4 = 7776; t4 = 0.082428;\n","\n","# Using Multivariate Newton‚Äôs method, find our position to ( x; y; z ) and our time correction to d.\n","\n","import numpy as np\n","from math import sqrt\n","\n","# Earth's radius (km)\n","r = 6367.4447\n","\n","# Speed of light in km/sec\n","c = 299792.458\n","\n","# Satellite positions and times\n","A1, B1, C1, t1 = 18500, 4980, 18405, 0.068369\n","A2, B2, C2, t2 = 19641, 8000, 16000, 0.071752\n","A3, B3, C3, t3 = 12356, 11129, 20719, 0.065283\n","A4, B4, C4, t4 = 18876, 17001, 7776, 0.082428\n","\n","# Define the function F(x)\n","F = lambda x: np.array(\n","    [[sqrt((x[0,0] - A1)**2 + (x[1,0] - B1)**2 + (x[2,0] - C1)**2) - c * (t1 - x[3,0])],\n","     [sqrt((x[0,0] - A2)**2 + (x[1,0] - B2)**2 + (x[2,0] - C2)**2) - c * (t2 - x[3,0])],\n","     [sqrt((x[0,0] - A3)**2 + (x[1,0] - B3)**2 + (x[2,0] - C3)**2) - c * (t3 - x[3,0])],\n","     [sqrt((x[0,0] - A4)**2 + (x[1,0] - B4)**2 + (x[2,0] - C4)**2) - c * (t4 - x[3,0])]])\n","\n","# Define the Jacobian matrix J(x)\n","J = lambda x: np.array(\n","    [[(x[0,0] - A1) / sqrt((x[0,0] - A1)**2 + (x[1,0] - B1)**2 + (x[2,0] - C1)**2),\n","      (x[1,0] - B1) / sqrt((x[0,0] - A1)**2 + (x[1,0] - B1)**2 + (x[2,0] - C1)**2),\n","      (x[2,0] - C1) / sqrt((x[0,0] - A1)**2 + (x[1,0] - B1)**2 + (x[2,0] - C1)**2), c],\n","     [(x[0,0] - A2) / sqrt((x[0,0] - A2)**2 + (x[1,0] - B2)**2 + (x[2,0] - C2)**2),\n","      (x[1,0] - B2) / sqrt((x[0,0] - A2)**2 + (x[1,0] - B2)**2 + (x[2,0] - C2)**2),\n","      (x[2,0] - C2) / sqrt((x[0,0] - A2)**2 + (x[1,0] - B2)**2 + (x[2,0] - C2)**2), c],\n","     [(x[0,0] - A3) / sqrt((x[0,0] - A3)**2 + (x[1,0] - B3)**2 + (x[2,0] - C3)**2),\n","      (x[1,0] - B3) / sqrt((x[0,0] - A3)**2 + (x[1,0] - B3)**2 + (x[2,0] - C3)**2),\n","      (x[2,0] - C3) / sqrt((x[0,0] - A3)**2 + (x[1,0] - B3)**2 + (x[2,0] - C3)**2), c],\n","     [(x[0,0] - A4) / sqrt((x[0,0] - A4)**2 + (x[1,0] - B4)**2 + (x[2,0] - C4)**2),\n","      (x[1,0] - B4) / sqrt((x[0,0] - A4)**2 + (x[1,0] - B4)**2 + (x[2,0] - C4)**2),\n","      (x[2,0] - C4) / sqrt((x[0,0] - A4)**2 + (x[1,0] - B4)**2 + (x[2,0] - C4)**2), c]])\n","\n","x_0, y_0, z_0, d_0 = 0, 0, 6370, 0\n","x_k = np.array([[x_0], [y_0], [z_0], [d_0]])  # Initial vector guess.\n","\n","# Newton's method iterations\n","for _ in range(10):  # Adjust the number of iterations as needed\n","    s = np.linalg.solve(J(x_k), -F(x_k))\n","    x_k = x_k + s\n","\n","print(\"x =\", f\"{x_k[0,0]: 10.5f}\", \"   y =\", f\"{x_k[1,0]: 10.5f}\", \"   z =\", f\"{x_k[2,0]: 10.4f}\", \"   d =\", f\"{x_k[3,0]: 10.6e}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CPJ3L6OvzD3w","executionInfo":{"status":"ok","timestamp":1721339015967,"user_tz":360,"elapsed":206,"user":{"displayName":"Dylan Ph","userId":"08011022677362301216"}},"outputId":"85d37307-077f-4a56-9dc4-ad50f8360b84"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["x =  220.07343    y =  -98.39842    z =  9109.3847    d = -2.103416e-03\n"]}]}]}