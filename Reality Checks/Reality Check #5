{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOdOZMZ88u45fq7DEaXCDJk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Z-bJbrLCFzgF"},"outputs":[],"source":["# Name: Dylan Phoutthavong\n","# Date: 06/14/2024\n","# Course: CSCI 4650 E01\n","\n","# Reality Check #5\n","\n","# Given\n","  # x = lambda t: 0.5 + 0.3 * t + 3.9 * t**2 - 4.7 * t**3\n","  # y = lambda t: 1.5 + 0.3 * t + 0.9 * t**2 - 2.7 * t**3\n","\n","# (Question 1) Create a function f(t) = sqrt ( x’(t)**2 + y’(t)**2 ) where\n","  # x(t) and y(t) are given above and x’(t) is the derivative of x(t) with respect\n","  # to t and y’(t) is the derivative of y(t) with respect to t. Then compute L the\n","  # integral of f(t) from t = 0 to t=1. For example, you can use:\n","  # scipy.integrate.quadrature(). Or you can use any method seen in Chapter 5. Give\n","  # your answer to 6 significant decimal places. Hint: The answer is L=2.49525.\n","\n","# (Question 2) Find the value of t_ such that the integral of f(t) from t\n","  # = 0 to t=t_ is s=0.4 using a root finding method. For example, you can use:\n","  # scipy.optimize.root_scalar(). Or you can use any method seen in Chapter 1. Give\n","  # your answer to 6 significant decimal places. Hint: The answer is t_=0.350239.\n","\n","# (Question 3) Repeat Question 2 with the following 24 values of s: s =\n","  # 0.1, 0.2, 0.3, 0.4, . . .  2.2, 2.3 and 2.4.\n","\n","# (Question 4) Now solve the same problem as in Question 2 but this times\n","  # using Newton’s method. At each iteration of Newton’s method, display the\n","  # forward error, that is the absolute value of the difference between your\n","  # current iterate and the solution (as computed in Question 2). Use the solution\n","  # of Question 2 with as computed with 16-digit accuracy. (Do not use the solution"]},{"cell_type":"code","source":["import numpy as np\n","from scipy.integrate import quadrature, quad\n","from scipy.optimize import root_scalar, newton\n","from math import sqrt\n","\n","# Given functions\n","x = lambda t: 0.5 + 0.3 * t + 3.9 * t**2 - 4.7 * t**3\n","y = lambda t: 1.5 + 0.3 * t + 0.9 * t**2 - 2.7 * t**3\n","\n","# Derivatives\n","x_prime = lambda t: 0.3 + 7.8 * t - 14.1 * t**2\n","y_prime = lambda t: 0.3 + 1.8 * t - 8.1 * t**2\n","\n","# Function f(t)\n","f = lambda t: sqrt(x_prime(t)**2 + y_prime(t)**2)"],"metadata":{"id":"wXmgHx2VJCjW","executionInfo":{"status":"ok","timestamp":1721797945161,"user_tz":360,"elapsed":383,"user":{"displayName":"Dylan Ph","userId":"08011022677362301216"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["# (Question 1) Create a function f(t) = sqrt ( x’(t)**2 + y’(t)**2 ) where\n","  # x(t) and y(t) are given above and x’(t) is the derivative of x(t) with respect\n","  # to t and y’(t) is the derivative of y(t) with respect to t. Then compute L the\n","  # integral of f(t) from t = 0 to t=1. For example, you can use:\n","  # scipy.integrate.quadrature(). Or you can use any method seen in Chapter 5. Give\n","  # your answer to 6 significant decimal places. Hint: The answer is L=2.49525.\n","\n","L, _ = quad(f, 0, 1)\n","print(f\"Length of the arc L = {L:.6f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hDIWcfICJku0","executionInfo":{"status":"ok","timestamp":1721797947941,"user_tz":360,"elapsed":173,"user":{"displayName":"Dylan Ph","userId":"08011022677362301216"}},"outputId":"aef87e2d-d283-4c54-b4a5-721397070f4f"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Length of the arc L = 2.495247\n"]}]},{"cell_type":"code","source":["# (Question 2) Find the value of t_ such that the integral of f(t) from t\n","  # = 0 to t=t_ is s=0.4 using a root finding method. For example, you can use:\n","  # scipy.optimize.root_scalar(). Or you can use any method seen in Chapter 1. Give\n","  # your answer to 6 significant decimal places. Hint: The answer is t_=0.350239.\n","\n","def integral_to_t(t, s):\n","    return quad(f, 0, t)[0] - s\n","\n","s_value = 0.4\n","sol = root_scalar(integral_to_t, args=(s_value,), bracket=[0, 1])\n","t_ = sol.root\n","print(f\"Value of t_ for s = 0.4: t_ = {t_:.6f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IotK1HdjJoxs","executionInfo":{"status":"ok","timestamp":1721797969005,"user_tz":360,"elapsed":163,"user":{"displayName":"Dylan Ph","userId":"08011022677362301216"}},"outputId":"e00f9801-b091-4e5d-819f-9c08ff0e5c46"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Value of t_ for s = 0.4: t_ = 0.350239\n"]}]},{"cell_type":"code","source":["# (Question 3) Repeat Question 2 with the following 24 values of s: s =\n","  # 0.1, 0.2, 0.3, 0.4, . . .  2.2, 2.3 and 2.4.\n","\n","s_values = np.arange(0.1, 2.5, 0.1)\n","t_values = []\n","for s in s_values:\n","    sol = root_scalar(integral_to_t, args=(s,), bracket=[0, 1])\n","    t_values.append(sol.root)\n","    print(f\"Value of t_ for s = {s:.1f}: t_ = {sol.root:.6f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5bNK3VOlJuV2","executionInfo":{"status":"ok","timestamp":1721797975345,"user_tz":360,"elapsed":157,"user":{"displayName":"Dylan Ph","userId":"08011022677362301216"}},"outputId":"4882d612-faee-40da-e4b7-a32ab54d9f86"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Value of t_ for s = 0.1: t_ = 0.124063\n","Value of t_ for s = 0.2: t_ = 0.204047\n","Value of t_ for s = 0.3: t_ = 0.276524\n","Value of t_ for s = 0.4: t_ = 0.350239\n","Value of t_ for s = 0.5: t_ = 0.432522\n","Value of t_ for s = 0.6: t_ = 0.525089\n","Value of t_ for s = 0.7: t_ = 0.602218\n","Value of t_ for s = 0.8: t_ = 0.657022\n","Value of t_ for s = 0.9: t_ = 0.699023\n","Value of t_ for s = 1.0: t_ = 0.733502\n","Value of t_ for s = 1.1: t_ = 0.763061\n","Value of t_ for s = 1.2: t_ = 0.789135\n","Value of t_ for s = 1.3: t_ = 0.812596\n","Value of t_ for s = 1.4: t_ = 0.834013\n","Value of t_ for s = 1.5: t_ = 0.853784\n","Value of t_ for s = 1.6: t_ = 0.872192\n","Value of t_ for s = 1.7: t_ = 0.889454\n","Value of t_ for s = 1.8: t_ = 0.905733\n","Value of t_ for s = 1.9: t_ = 0.921161\n","Value of t_ for s = 2.0: t_ = 0.935840\n","Value of t_ for s = 2.1: t_ = 0.949857\n","Value of t_ for s = 2.2: t_ = 0.963283\n","Value of t_ for s = 2.3: t_ = 0.976176\n","Value of t_ for s = 2.4: t_ = 0.988587\n"]}]},{"cell_type":"code","source":["# (Question 4) Now solve the same problem as in Question 2 but this times\n","  # using Newton’s method. At each iteration of Newton’s method, display the\n","  # forward error, that is the absolute value of the difference between your\n","  # current iterate and the solution (as computed in Question 2). Use the solution\n","  # of Question 2 with as computed with 16-digit accuracy. (Do not use the solution\n","\n","# Question 4: Solve using Newton's method\n","def newton_method(s, tol=1e-16, max_iter=100):\n","    def F(t):\n","        return quad(f, 0, t)[0] - s\n","\n","    def F_prime(t):\n","        return f(t)\n","\n","    t_current = 0.5  # Initial guess\n","    for _ in range(max_iter):\n","        t_next = t_current - F(t_current) / F_prime(t_current)\n","        error = abs(t_next - t_current)\n","        print(f\"Iteration: {_}, t_current: {t_current:.16f}, Error: {error:.16f}\")\n","        if error < tol:\n","            break\n","        t_current = t_next\n","\n","    return t_current\n","\n","t_newton = newton_method(s_value)\n","print(f\"Value of t_ for s = 0.4 using Newton's method: t_ = {t_newton:.16f}\")\n","\n","# Using 16-digit accuracy for the solution\n","s_value_high_accuracy = 0.4\n","sol_high_accuracy = root_scalar(integral_to_t, args=(s_value_high_accuracy,), bracket=[0, 1], xtol=1e-16)\n","t_high_accuracy = sol_high_accuracy.root\n","print(f\"Value of t_ for s = 0.4 with 16-digit accuracy: t_ = {t_high_accuracy:.16f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CW9g6TF6J01V","executionInfo":{"status":"ok","timestamp":1721797986420,"user_tz":360,"elapsed":182,"user":{"displayName":"Dylan Ph","userId":"08011022677362301216"}},"outputId":"02ff2223-bb25-46d1-c255-9ad47ad931d2"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Iteration: 0, t_current: 0.5000000000000000, Error: 0.1620983491276471\n","Iteration: 1, t_current: 0.3379016508723529, Error: 0.0122370224318310\n","Iteration: 2, t_current: 0.3501386733041839, Error: 0.0001006276670749\n","Iteration: 3, t_current: 0.3502393009712588, Error: 0.0000000073221911\n","Iteration: 4, t_current: 0.3502393082934499, Error: 0.0000000000000001\n","Value of t_ for s = 0.4 using Newton's method: t_ = 0.3502393082934499\n","Value of t_ for s = 0.4 with 16-digit accuracy: t_ = 0.3502393082934500\n"]}]}]}